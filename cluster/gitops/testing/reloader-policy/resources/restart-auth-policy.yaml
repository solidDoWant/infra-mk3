---
# yaml-language-server: $schema=https://raw.githubusercontent.com/datreeio/CRDs-catalog/main/kyverno.io/policy_v1.json
apiVersion: kyverno.io/v1
kind: Policy
metadata:
  name: restart-workload-on-config-changes
spec:
  mutateExistingOnPolicyUpdate: false
  rules:
    # Global anchors appear to be "AND"ed together, so separate rules are
    # needed for every combination of:
    # * secrets, configmaps
    # * containers and initcontainers
    # * volume, env, envFrom
    - &configmap_rule
      name: restart-workload-on-configmap-volume-change
      match:
        any:
          - resources: &configmap_resources
              kinds:
                - ConfigMap
              operations:
                - UPDATE
              selector:
                matchLabels:
                  kyverno.home.arpa/reload: "true"
          # CNPG doesn't directly attach secrets to database server pods, so
          # this shouldn't affect a database cluster. CNPG handles reloads on
          # its own.
          - resources:
              <<: *configmap_resources
              selector:
                matchLabels:
                  cnpg.io/reload: "true"
      preconditions: &preconditions
        # Only run if the contents have changed
        # This ignores things like metadata and status changes
        any:
          - key: "{{ request.object.data || `{}` | to_string(@) }}"
            operator: NotEquals
            value: "{{ request.oldObject.data || `{}` | to_string(@) }}"
          - key: "{{ request.object.binaryData || `{}` | to_string(@) }}"
            operator: NotEquals
            value: "{{ request.oldObject.binaryData || `{}` | to_string(@) }}"
      mutate:
        targets: &targets
          - &target
            apiVersion: apps/v1
            kind: Deployment
            # namespace: "{{ request.namespace }}"
            namespace: testing
          - <<: *target
            kind: StatefulSet
          - <<: *target
            kind: DaemonSet
        patchStrategicMerge:
          spec:
            template: &template
              metadata:
                annotations:
                  kyverno.home.arpa/reload-tag: "{{ random('[0-9a-z]{8}') }}"
              spec:
                volumes:
                  - configMap:
                      <(name): &object_name "{{ request.object.metadata.name }}"
    - &secret_rule
      <<: *configmap_rule
      name: restart-workload-on-secret-volume-change
      match:
        any:
          - resources: &secret_resources
              <<: *configmap_resources
              kinds:
                - Secret
          - resources:
              <<: *secret_resources
              selector:
                matchLabels:
                  cnpg.io/reload: "true"
      preconditions: *preconditions
      mutate:
        targets: *targets
        patchStrategicMerge:
          spec:
            template:
              <<: *template
              spec:
                volumes:
                  - secret:
                      <(secretName): *object_name
    - <<: *configmap_rule
      name: restart-workload-on-container-configmap-env-change
      mutate:
        targets: *targets
        patchStrategicMerge:
          spec:
            template:
              <<: *template
              spec:
                containers: &configmap_env_change
                  - env:
                      - valueFrom:
                          configMapKeyRef:
                            <(name): *object_name
    - <<: *secret_rule
      name: restart-workload-on-container-secret-env-change
      mutate:
        targets: *targets
        patchStrategicMerge:
          spec:
            template:
              <<: *template
              spec:
                containers: &secret_env_change
                  - env:
                      - valueFrom:
                          secretKeyRef:
                            <(name): *object_name
    - <<: *configmap_rule
      name: restart-workload-on-container-configmap-envfrom-change
      mutate:
        targets: *targets
        patchStrategicMerge:
          spec:
            template:
              <<: *template
              spec:
                containers: &configmap_envfrom_change
                  - envFrom:
                      - configMapRef:
                          <(name): *object_name
    - <<: *secret_rule
      name: restart-workload-on-container-secret-envfrom-change
      mutate:
        targets: *targets
        patchStrategicMerge:
          spec:
            template:
              <<: *template
              spec:
                containers: &secret_envfrom_change
                  - envFrom:
                      - secretRef:
                          <(name): *object_name
    - <<: *configmap_rule
      name: restart-workload-on-initContainer-configmap-env-change
      mutate:
        targets: *targets
        patchStrategicMerge:
          spec:
            template:
              <<: *template
              spec:
                initContainers: *configmap_env_change
    - <<: *secret_rule
      name: restart-workload-on-initContainer-secret-env-change
      mutate:
        targets: *targets
        patchStrategicMerge:
          spec:
            template:
              <<: *template
              spec:
                initContainers: *secret_env_change
    - <<: *configmap_rule
      name: restart-workload-on-initContainer-configmap-envfrom-change
      mutate:
        targets: *targets
        patchStrategicMerge:
          spec:
            template:
              <<: *template
              spec:
                initContainers: *configmap_envfrom_change
    - <<: *secret_rule
      name: restart-workload-on-initContainer-secret-envfrom-change
      mutate:
        targets: *targets
        patchStrategicMerge:
          spec:
            template:
              <<: *template
              spec:
                initContainers: *secret_envfrom_change
