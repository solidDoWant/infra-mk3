---
# yaml-language-server: $schema=https://raw.githubusercontent.com/datreeio/CRDs-catalog/main/cilium.io/ciliumnetworkpolicy_v2.json
apiVersion: cilium.io/v2
kind: CiliumNetworkPolicy
metadata:
  name: harbor
specs:
  - description: core
    endpointSelector: &core_selector
      matchLabels:
        app.kubernetes.io/name: harbor
        app.kubernetes.io/component: core
        app.kubernetes.io/instance: harbor
    egress:
      # DNS resolution
      - &dns_resolution
        toEndpoints:
          - matchLabels:
              io.kubernetes.pod.namespace: networking
              endpoints.netpols.home.arpa/cluster-dns: "true"
        toPorts:
          - ports:
              - port: "53"
                protocol: UDP
              - port: "53"
                protocol: TCP
            rules:
              dns:
                - matchPattern: "*"
      # Access to the backend PostgreSQL database
      - &to_database
        toEndpoints:
          - matchLabels:
              cnpg.io/cluster: harbor-postgres-17
        toPorts:
          - ports:
              - port: "5432"
                protocol: TCP
      # Access to the backend Redis/Dragonfly instance
      - &to_redis
        toEndpoints:
          - matchLabels:
              app.kubernetes.io/name: dragonfly
              app.kubernetes.io/instance: harbor-dragonfly
        toPorts:
          - ports:
              - port: "6379"
                protocol: TCP
      # Access to the registry service
      - toEndpoints:
          - &registry_service_selector
            matchLabels:
              app.kubernetes.io/name: harbor
              app.kubernetes.io/component: registry
              app.kubernetes.io/instance: harbor
        toPorts:
          - ports:
              - port: "5000"
                protocol: TCP
              - port: "8080"
                protocol: TCP
      # Access to the trivy service
      - toEndpoints:
          - &trivy_service_selector
            matchLabels:
              app.kubernetes.io/name: harbor
              app.kubernetes.io/component: trivy
              app.kubernetes.io/instance: harbor
        toPorts:
          - ports:
              - port: "8080"
                protocol: TCP
      # Access to the portal service
      - toEndpoints:
          - &portal_service_selector
            matchLabels:
              app.kubernetes.io/name: harbor
              app.kubernetes.io/component: portal
              app.kubernetes.io/instance: harbor
        toPorts:
          - ports:
              - port: "8080"
                protocol: TCP
    ingress:
      # Kubelet for healthcheck
      - fromEntities:
          - host
        toPorts:
          - ports:
              - port: "8080"
                protocol: TCP
      # Metrics
      - &from_metrics_scraper
        fromEndpoints:
          - matchLabels:
              io.kubernetes.pod.namespace: monitoring
              endpoints.netpols.home.arpa/metrics-scraper: "true"
        toPorts:
          - ports:
              - port: "8001"
                protocol: TCP
      # Access from the job service
      - fromEndpoints:
          - &job_service_selector
            matchLabels:
              app.kubernetes.io/name: harbor
              app.kubernetes.io/component: jobservice
              app.kubernetes.io/instance: harbor
        toPorts:
          - ports:
              - port: "8080"
                protocol: TCP
        # Ingress from internal gateway
      - fromEndpoints:
          - &ingress_gateway_selector
            matchLabels:
              io.kubernetes.pod.namespace: networking
              app.kubernetes.io/name: ingress-gateways
              gateway.networking.k8s.io/gateway-name: internal-gateway
        toPorts:
          - ports:
              - port: "8080"
                protocol: TCP

  - description: portal
    endpointSelector: *portal_service_selector
    ingress:
      # Kubelet for healthcheck
      - fromEntities:
          - host
        toPorts:
          - ports:
              - port: "8080"
                protocol: TCP
      - fromEndpoints:
          - *ingress_gateway_selector
          - *core_selector
        toPorts:
          - ports:
              - port: "8080"
                protocol: TCP

  - description: jobservice
    endpointSelector: *job_service_selector
    egress:
      - *dns_resolution
      - *to_redis
      # Access to the core service
      - toEndpoints:
          - *core_selector
        toPorts:
          - ports:
              - port: "8080"
                protocol: TCP
    ingress:
      # Kubelet for healthcheck
      - fromEntities:
          - host
        toPorts:
          - ports:
              - port: "8080"
      - *from_metrics_scraper

  - description: registry
    endpointSelector: *registry_service_selector
    egress:
      - *dns_resolution
    ingress:
      # Kubelet for healthcheck
      - fromEntities:
          - host
        toPorts:
          - ports:
              - port: "5000"
                protocol: TCP
              - port: "8080"
                protocol: TCP
      - *from_metrics_scraper
      - fromEndpoints:
          - *core_selector
        toPorts:
          - ports:
              - port: "5000"
                protocol: TCP
              - port: "8080"
                protocol: TCP

  - description: trivy
    endpointSelector: *trivy_service_selector
    egress:
      - *dns_resolution
      - *to_redis
    ingress:
      # Kubelet for healthcheck
      - fromEntities:
          - host
        toPorts:
          - ports:
              - port: "8080"
                protocol: TCP
      - fromEndpoints:
          - *core_selector
        toPorts:
          - ports:
              - port: "8080"
                protocol: TCP

  - description: exporter
    endpointSelector:
      matchLabels:
        app.kubernetes.io/name: harbor
        app.kubernetes.io/component: exporter
        app.kubernetes.io/instance: harbor
    egress:
      - *dns_resolution
      - *to_database
    ingress:
      # Kubelet for healthcheck
      - fromEntities:
          - host
        toPorts:
          - ports:
              - port: "8001"
                protocol: TCP
      - *from_metrics_scraper
