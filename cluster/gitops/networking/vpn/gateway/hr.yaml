---
# yaml-language-server: $schema=https://raw.githubusercontent.com/bjw-s/helm-charts/main/charts/other/app-template/schemas/helmrelease-helm-v2.schema.json
apiVersion: helm.toolkit.fluxcd.io/v2
kind: HelmRelease
metadata:
  name: vpn-gateway
spec:
  interval: 5m
  chart:
    spec:
      chart: app-template
      reconcileStrategy: ChartVersion
      sourceRef:
        kind: HelmRepository
        namespace: flux-system
        name: bjw-s-charts
      version: 3.7.3
  values:
    controllers:
      vpn-gateway:
        replicas: 2
        # This is just a statefulset so that pods are assigned a known index. This allows for a very slightly different
        # configuration for each pod, which is needed to ensure that each pod connects to a different VPN endpoint.
        # If this was implemented via two different deployments, then upgrades would terminate both pods at the same time,
        # which would cause a short downtime. With a statefulset, the pods are terminated one by one, so there is no downtime.
        type: statefulset
        initContainers:
          # Configures iptables rules to forward traffic from the VPN exit node to the destination IP.
          # The destination IP address is a load balancer service. Applications that want to receive
          # traffic via the VPN exit node should deploy a service with this IP address, and the port
          # that is forwarded by the VPN exit node. One application per port only!
          setup-nat:
            # Use the same image just to avoid pulling another image.
            image: &image # cspell:words qmcgaw
              repository: qmcgaw/gluetun
              tag: v3.40.0
            env:
              VPN_INTERFACE: tun0 # Interface for VPN traffic
              GATEWAY_NETWORK_INTERFACE: vpn-gw-veth0 # Interface for the VPN subnet
              # All traffic for the ports that are forwarded by the VPN exit node will be forwarded again to this address.
              # Traffic will be masqueraded to this address so return traffic can be routed back to the VPN exit node.
              # It is important to use masquerading here instead of SNAT because the pod IP can change under certain conditions.
              PORT_FORWARDING_PORTS: >
                ${SECRET_VPN_FORWARDED_PORT_1}
                ${SECRET_VPN_FORWARDED_PORT_2}
                ${SECRET_VPN_FORWARDED_PORT_3}
                ${SECRET_VPN_FORWARDED_PORT_4}
                ${SECRET_VPN_FORWARDED_PORT_5}
              # Ingress traffic will be forwarded to this IP + the pod index (0, 1, ...).
              # This is needed for connection tracking to ensure that return traffic goes back to the correct pod.
              PORT_FORWARD_DESTINATION_BASE_IP: 192.168.26.128
              LOCAL_GATEWAY_NETWORK_IP_PREFIX: 192.168.25
              LOCAL_GATEWAY_NETWORK_SUBNET_BITS: 22
              # These variable values are different for each pod. See the startup script below,
              # the statefulset note above, and the vpn-credentials secret.
              POD_SPECIFIC_VARS: WIREGUARD_ADDRESSES
              POD_NAME:
                valueFrom:
                  fieldRef:
                    fieldPath: metadata.name
            envFrom:
              - secretRef:
                  name: vpn-gateway-credentials
            command:
              - /usr/local/bin/setup-nat.sh
            securityContext:
              readOnlyRootFilesystem: true
              capabilities:
                add:
                  - NET_ADMIN
        containers:
          gluetun:
            image: *image
            env:
              VPN_TYPE: wireguard
              BLOCK_MALICIOUS: "off"
              DNS_UPDATE_PERIOD: "0"
              HTTPPROXY: "on"
              HTTPPROXY_STEALTH: "on"
              SHADOWSOCKS: "on"
              PUID: "1000"
              PGID: "1000"
              VERSION_INFORMATION: "off"
              HEALTH_VPN_DURATION_INITIAL: 10s
              # Listen on all interfaces
              # TODO iptables rule to block traffic from tun0
              HEALTH_SERVER_ADDRESS: ":9999"
              # Handled via netpols
              FIREWALL_ENABLED_DISABLING_IT_SHOOTS_YOU_IN_YOUR_FOOT: "off"
              # Allow all non-reserved ranges.
              # Script to generate this:
              # python - <<EOF
              # from netaddr import IPSet, IPNetwork
              # import urllib.request
              # import csv

              # url="https://www.iana.org/assignments/iana-ipv4-special-registry/iana-ipv4-special-registry-1.csv"

              # with urllib.request.urlopen(url) as iana_doc:
              #     iana_csv = csv.DictReader(iana_doc.read().decode().splitlines())

              # routable_ranges = IPSet(IPNetwork("0.0.0.0/0"))
              # Link-local multicast is not included in the IANA document
              # routable_ranges.remove("224.0.0.0/4")
              # for row in iana_csv:
              #     if "Address Block" not in row:
              #         continue
              #     address_range = row["Address Block"]
              #     # Some of these are formatted weirdly
              #     if "[" in address_range:
              #         address_range = address_range.split(" [")[0]
              #     if "," in address_range:
              #         for subrange in address_range.split(", "):
              #             routable_ranges.remove(subrange)
              #         continue
              #     routable_ranges.remove(address_range)

              # print(f'"\\\\\n{",\\\\\n".join([str(r) for r in routable_ranges.iter_cidrs()])}\\\\\n"')
              # EOF
              WIREGUARD_ALLOWED_IPS: "\
                1.0.0.0/8,\
                2.0.0.0/7,\
                4.0.0.0/6,\
                8.0.0.0/7,\
                11.0.0.0/8,\
                12.0.0.0/6,\
                16.0.0.0/4,\
                32.0.0.0/3,\
                64.0.0.0/3,\
                96.0.0.0/6,\
                100.0.0.0/10,\
                100.128.0.0/9,\
                101.0.0.0/8,\
                102.0.0.0/7,\
                104.0.0.0/5,\
                112.0.0.0/5,\
                120.0.0.0/6,\
                124.0.0.0/7,\
                126.0.0.0/8,\
                128.0.0.0/3,\
                160.0.0.0/5,\
                168.0.0.0/8,\
                169.0.0.0/9,\
                169.128.0.0/10,\
                169.192.0.0/11,\
                169.224.0.0/12,\
                169.240.0.0/13,\
                169.248.0.0/14,\
                169.252.0.0/15,\
                169.255.0.0/16,\
                170.0.0.0/7,\
                172.0.0.0/12,\
                172.32.0.0/11,\
                172.64.0.0/10,\
                172.128.0.0/9,\
                173.0.0.0/8,\
                174.0.0.0/7,\
                176.0.0.0/4,\
                192.0.1.0/24,\
                192.0.3.0/24,\
                192.0.4.0/22,\
                192.0.8.0/21,\
                192.0.16.0/20,\
                192.0.32.0/19,\
                192.0.64.0/18,\
                192.0.128.0/17,\
                192.1.0.0/16,\
                192.2.0.0/15,\
                192.4.0.0/14,\
                192.8.0.0/13,\
                192.16.0.0/13,\
                192.24.0.0/14,\
                192.28.0.0/15,\
                192.30.0.0/16,\
                192.31.0.0/17,\
                192.31.128.0/18,\
                192.31.192.0/22,\
                192.31.197.0/24,\
                192.31.198.0/23,\
                192.31.200.0/21,\
                192.31.208.0/20,\
                192.31.224.0/19,\
                192.32.0.0/12,\
                192.48.0.0/14,\
                192.52.0.0/17,\
                192.52.128.0/18,\
                192.52.192.0/24,\
                192.52.194.0/23,\
                192.52.196.0/22,\
                192.52.200.0/21,\
                192.52.208.0/20,\
                192.52.224.0/19,\
                192.53.0.0/16,\
                192.54.0.0/15,\
                192.56.0.0/13,\
                192.64.0.0/12,\
                192.80.0.0/13,\
                192.88.0.0/18,\
                192.88.64.0/19,\
                192.88.96.0/23,\
                192.88.98.0/24,\
                192.88.100.0/22,\
                192.88.104.0/21,\
                192.88.112.0/20,\
                192.88.128.0/17,\
                192.89.0.0/16,\
                192.90.0.0/15,\
                192.92.0.0/14,\
                192.96.0.0/11,\
                192.128.0.0/11,\
                192.160.0.0/13,\
                192.169.0.0/16,\
                192.170.0.0/15,\
                192.172.0.0/15,\
                192.174.0.0/16,\
                192.175.0.0/19,\
                192.175.32.0/20,\
                192.175.49.0/24,\
                192.175.50.0/23,\
                192.175.52.0/22,\
                192.175.56.0/21,\
                192.175.64.0/18,\
                192.175.128.0/17,\
                192.176.0.0/12,\
                192.192.0.0/10,\
                193.0.0.0/8,\
                194.0.0.0/7,\
                196.0.0.0/7,\
                198.0.0.0/12,\
                198.16.0.0/15,\
                198.20.0.0/14,\
                198.24.0.0/13,\
                198.32.0.0/12,\
                198.48.0.0/15,\
                198.50.0.0/16,\
                198.51.0.0/18,\
                198.51.64.0/19,\
                198.51.96.0/22,\
                198.51.101.0/24,\
                198.51.102.0/23,\
                198.51.104.0/21,\
                198.51.112.0/20,\
                198.51.128.0/17,\
                198.52.0.0/14,\
                198.56.0.0/13,\
                198.64.0.0/10,\
                198.128.0.0/9,\
                199.0.0.0/8,\
                200.0.0.0/7,\
                202.0.0.0/8,\
                203.0.0.0/18,\
                203.0.64.0/19,\
                203.0.96.0/20,\
                203.0.112.0/24,\
                203.0.114.0/23,\
                203.0.116.0/22,\
                203.0.120.0/21,\
                203.0.128.0/17,\
                203.1.0.0/16,\
                203.2.0.0/15,\
                203.4.0.0/14,\
                203.8.0.0/13,\
                203.16.0.0/12,\
                203.32.0.0/11,\
                203.64.0.0/10,\
                203.128.0.0/9,\
                204.0.0.0/6,\
                208.0.0.0/4\
                "
              WIREGUARD_MTU: "1420"
              POD_SPECIFIC_VARS: "WIREGUARD_ADDRESSES SERVER_COUNTRIES"
              POD_NAME:
                valueFrom:
                  fieldRef:
                    fieldPath: metadata.name
            envFrom:
              - secretRef:
                  name: vpn-gateway-credentials
            command:
              - /usr/local/bin/startup.sh
            lifecycle:
              # From https://github.com/qdm12/gluetun-wiki/blob/main/setup/advanced/kubernetes.md#adding-ipv6-rule--file-exists
              # This must run on every container start, not the pod start, as it handles a gluetun bug when the container
              # is restarted.
              postStart:
                exec:
                  command:
                    - /bin/sh
                    - -c
                    - ip rule del table 51820 || true
            securityContext:
              capabilities:
                add:
                  - DAC_OVERRIDE
                  - MKNOD
                  - NET_ADMIN
                  - CHOWN
            ports:
              - name: web-control
                containerPort: 8000
              - name: http-proxy
                containerPort: 8888
              - name: shadowsocks-tcp
                containerPort: 8388
              - name: shadowsocks-udp
                containerPort: 8388
                protocol: UDP
            probes:
              # From https://github.com/qdm12/gluetun-wiki/blob/main/faq/healthcheck.md#docker-healthcheck
              readiness: &gluetun_probe
                enabled: true
                custom: true
                spec: &gluetun_probe_spec
                  initialDelaySeconds: 15
                  exec:
                    command:
                      - /gluetun-entrypoint
                      - healthcheck
              liveness:
                <<: *gluetun_probe
                spec:
                  <<: *gluetun_probe_spec
                  initialDelaySeconds: 0
        pod:
          labels:
            endpoints.netpols.home.arpa/vpn-gateway: "true"
          annotations:
            # Attach the pod to the VPN gateway network using the gateway-network-vpn-gateway-pods network attachment definition.
            # The interface name within the pod will be vpn-gw-veth0.
            k8s.v1.cni.cncf.io/networks: gateway-network-vpn-gateway-pods@vpn-gw-veth0
          dnsConfig:
            options:
              - name: ndots
                value: "1"
    persistence:
      setup-nat-scripts: &scripts
        type: configMap
        name: vpn-gateway-scripts
        defaultMode: 0755
        advancedMounts:
          vpn-gateway:
            setup-nat:
              - path: /usr/local/bin/setup-nat.sh
                subPath: setup-nat.sh
              - path: /usr/local/bin/set-env-vars.sh
                subPath: set-env-vars.sh
      gluetun-scripts:
        <<: *scripts
        advancedMounts:
          vpn-gateway:
            gluetun:
              - path: /usr/local/bin/startup.sh
                subPath: startup.sh
              - path: /usr/local/bin/set-env-vars.sh
                subPath: set-env-vars.sh
    service:
      proxy:
        controller: vpn-gateway
        type: LoadBalancer
        annotations:
          lbipam.cilium.io/ips: 10.34.0.5
        ports:
          http-proxy:
            port: 8888
          shadowsocks-tcp:
            port: 8388
          shadowsocks-udp:
            port: 8388
            protocol: UDP
