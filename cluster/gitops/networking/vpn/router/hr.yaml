---
# yaml-language-server: $schema=https://raw.githubusercontent.com/bjw-s/helm-charts/main/charts/other/app-template/schemas/helmrelease-helm-v2.schema.json
apiVersion: helm.toolkit.fluxcd.io/v2
kind: HelmRelease
metadata:
  name: vpn-router
spec:
  interval: 5m
  chart:
    spec:
      chart: app-template
      reconcileStrategy: ChartVersion
      sourceRef:
        kind: HelmRepository
        namespace: flux-system
        name: bjw-s-charts
      version: 4.2.0
  values:
    controllers:
      vpn-router:
        replicas: 2
        strategy: RollingUpdate
        defaultContainerOptions:
          image:
            # This image includes both keepalived and the gateway route manager itself
            repository: ghcr.io/soliddowant/gateway-route-manager
            tag: 0.0.6-extended
          # Needed for netlink access
          securityContext:
            capabilities:
              add:
                - NET_ADMIN
        initContainers:
          keepalived-config-gen:
            # The keepalived configuration is about a 2000 lines long with 95% of it being repetitive.
            # To make it easier to manage, it is generated from simple shell script.
            # Keepalived supports some templating, but it is incredibly rigid, and extremely opaque when
            # something doesn't work.
            command:
              - /usr/local/bin/keepalived-conf-gen.sh
            env:
              # The VPN tunnels will listen to and forward traffic destined for these ports
              INGRESS_PORTS: >
                ${SECRET_VPN_FORWARDED_PORT_1}
                ${SECRET_VPN_FORWARDED_PORT_2}
                ${SECRET_VPN_FORWARDED_PORT_3}
                ${SECRET_VPN_FORWARDED_PORT_4}
                ${SECRET_VPN_FORWARDED_PORT_5}
              # VRRP advertisements and IPVS connection state syncing will use this interface.
              ROUTER_NETWORK_INTERFACE: vpn-r-veth0
              # Egress traffic (traffic originating from the cluster to the internet via the VPN gateways)
              # will use this as the nexthop address.
              EGRESS_VIP_ADDRESS: &router_primary_vip 192.168.26.254
              # This is the subnet mask for the gateway network.
              SUBNET_CIDR_BITS: 22
              # VIP MACVLAN interfaces will use this as the underlying interface
              VIP_UNDERLYING_INTERFACE: vpn-gw-veth0
              # This is the maximum number of VPN gateways that will be deployed.
              GATEWAY_COUNT: &gateway_count 8
              # This is the start of the IP range that will accept ingress traffic from gateways. One IP
              # is used per gateway.
              INGRESS_VIP_START: &ingress_vip_start 192.168.26.128
              # This is the start of the IP range that will be assigned to clients that accept ingress traffic.
              CLIENT_INGRESS_IP_START: 192.168.27.0
              # This is the most number of clients that will accept traffic from each port.
              CLIENT_INGRESS_COUNT_PER_PORT: 16
              # This is the start of the IP range that will be assigned to DNS servers.
              DNS_SERVER_START_IP: 192.168.27.128
              # This is the maximum number of DNS servers that will be deployed.
              DNS_SERVER_COUNT: 16
          # DNAT DNS requests destined for the kube-dns service to the VPN DNS servers. This prevents
          # DNS requests from leaking, while not requiring any configuration changes to client pods.
          setup-dns-nat:
            command:
              - /usr/local/bin/setup-dns-nat.sh
            env:
              KUBE_DNS_SERVICE_IP_ADDRESS: 10.33.0.10
              ROUTER_VIP_ADDRESS: *router_primary_vip
          # This uses connection tracking to ensure that return traffic for incoming connections
          # goes back out the same gateway that the incoming traffic arrived on. This is critically
          # important for all return traffic, because without this, return traffic will be SNATed
          # via a random gateway (and IP address), which will break connections.
          #
          # This does not need to be synced between router pods because connections are marked when
          # considered "new", and kernel connection tracking will treat the first packet in a stream
          # as "new", even if it is not the actual first packet (e.g. TCP SYN).
          setup-return-routing:
            command:
              - /usr/local/bin/setup-return-routing.sh
            env:
              GATEWAY_COUNT: *gateway_count
              INGRESS_VIP_START: *ingress_vip_start
              # Start of the IP range that will be assigned to VPN gateways. These are the nexthop addresses
              # for ingress return traffic.
              GATEWAY_IP_START: 192.168.25.128
        containers:
          # This container advertises the router virtual IP address using Virtual Router Redundancy Protocol (VRRP),
          # a first hop redundancy protocol (FHRP).
          keepalived:
            command:
              - keepalived
            args:
              - --dont-fork
              - --log-console
              - --log-detail
              - --no-syslog
              - --dump-conf
            probes:
              startup:
                enabled: true
                custom: true
                spec: &probe_config
                  exec:
                    command:
                      - /usr/local/bin/keepalived-startup-probe.sh
                  initialDelaySeconds: 15
                  periodSeconds: 5
                  failureThreshold: 12 # Allow up to 1 minute for startup
                  timeoutSeconds: 3
              liveness:
                enabled: true
                custom: true
                spec:
                  <<: *probe_config
                  exec:
                    command:
                      - /usr/local/bin/keepalived-liveness-probe.sh
          # This container monitors the VPN gateway endpoints and updates routes in the namespace's routing table
          # to ensure that traffic is load balanced across all available VPN gateways.
          gateway-route-manager:
            command:
              - gateway-route-manager
            args:
              - --check-period=1s
              - --timeout=750ms
              - --port=9999
              - --start-ip=192.168.25.128
              - --end-ip=192.168.25.135
              # Enable this for some additional logging. This will generate several lines per second, and can make it harder to see other log messages.
              # - --log-level=debug
            ports:
              - name: metrics
                containerPort: 9090
        pod:
          annotations:
            # Attach the pod to the VPN gateway network using the gateway-network-vpn-gateway-pods network attachment definition.
            # Format is <network-attachment-definition>@<interface-name>.
            k8s.v1.cni.cncf.io/networks: >
              gateway-network-router-pods@vpn-gw-veth0,
              gateway-router-network@vpn-r-veth0
          securityContext:
            # ******************************************************* IMPORTANT *******************************************************
            # * The kubelet on each node that the pods run on must allow these to be set.                                             *
            # * Alternatively, these could all be set using the [tuning CNI plugin](https://www.cni.dev/plugins/current/meta/tuning/) *
            # * For details, see https://kubernetes.io/docs/tasks/administer-cluster/sysctl-cluster/#enabling-unsafe-sysctls.         *
            # *************************************************************************************************************************

            # Read these carefully before changing any of them.
            sysctls:
              # Disable sending ICMP redirects. Client pods should always go through a router pod, because the router pods
              # have up to date routes to all available VPN gateways.
              - name: net.ipv4.conf.default.send_redirects
                value: "0"

              # This value is ORed with the per-device send_redirects value. Setting this to 0 ensures that redirects are disabled on the vpn-gw-veth0 interface.
              - name: net.ipv4.conf.all.send_redirects
                value: "0"

              # Ignore ARP requests on all interfaces except the one that owns the IP address. This is important to ensure that only the master responds to ARP
              # requests for the VIP. If the backup were to respond, learning switches could end up thinking that the MAC is accessible on the wrong port.
              # TODO not 100% sure that this is needed in a network that is exclusively bridges tied together with a VXLAN
              - name: net.ipv4.conf.all.arp_ignore
                value: "1"

              # Ensure that ARP requests only include the source IP tied to the actual interface. This helps to avoid confusing switches/bridges with learning enabled.
              # TODO not 100% sure that this is needed in a network that is exclusively bridges tied together with a VXLAN
              - name: net.ipv4.conf.all.arp_announce
                value: "2"

              # These cover the other interface on the gateway network
              - name: net.ipv4.conf.vpn-gw-veth0.arp_ignore
                value: "1"

              - name: net.ipv4.conf.vpn-gw-veth0.arp_announce
                value: "2"

              # These cover the MACVLAN interface that will be created/removed by keepalived
              - name: net.ipv4.conf.default.arp_ignore
                value: "1"

              - name: net.ipv4.conf.default.arp_announce
                value: "2"

              # It is important to set this to a static value for all pods, otherwise they will all generate a different random seed at startup
              # and packets could be forwarded to different gateways when router pods fail over. This can be any positive, non-zero integer.
              - name: net.ipv4.fib_multipath_hash_seed
                value: "0xDEADBEEF"

              # Configure ECMP hashing. This determines how packets are distributed across multiple equal-cost paths. The default
              # is layer 3 only, which means that all packets between two endpoints will always take the same path.
              - name: net.ipv4.fib_multipath_hash_policy
                # Use layer 3 + 4 (source + destination IP address, protocol, source + destination port) for ECMP hashing.
                value: "1"
                # Enable this to use the fib_multipath_hash_fields sysctl below
                # value: "3"

              # This is critically important for failover and without it ingress routing will not work properly, if at all.
              # This configures IPVS to track connections (it does not do this by default). By tracking connections, return traffic (e.g. TCP SYN-ACKs) will take
              # the same path as the originating traffic (e.g. TCP SYNs) every time. Without it traffic can (and will) go out a random gateway based on the ECMP
              # hash, which will break connections.
              # In addition, this state is synced between the master and backup routers, so that if the master fails, the backup can take over without dropping existing
              # connections.
              - name: net.ipv4.vs.conntrack
                value: "1"

              # Optional sysctls

              # This setting is a tradeoff between availability and security. It allows non-SYN packets to establish new connections even if no SYN packet was seen.
              # This can be useful for failover scenarios where either a connection was partially established between the master and a client (e.g. SYN was sent, but
              # SYN-ACK) was not received before the master failed, or if not enough packets were sent for the connection state to sync (see the sync_threshold setting
              # below).
              # The risk is that a malicious client can non-SYN packets to establish a connection without a handshake, causing a denial of service by exhausting connection
              # tracking resources. If this becomes a problem then I'll turn this off.
              - name: net.ipv4.vs.sloppy_tcp
                value: "1"

              # This is the minimum number of packets that must be seen on a connection before the connection state is synced to backup routers. The default is 3.
              # Lowering this value can help to reduce the number of dropped connections during failover, especially for short-lived connections, but increases the amount
              # of data that must be synced.
              # Setting it to 1 means that connections will be synced as soon as they are established, which is ideal for failover, but pretty chatty and wasteful most of
              # the time.
              # - name: net.ipv4.vs.sync_threshold
              #   value: "1"

              # This will allow for multiple connections to the same host:port to take the same path. This can be important for
              # clients that can use multiple connections to the same endpoint, such as web browsers in some cases.
              # This isn't usually needed, but might helpful for some use cases.
              # This is a bitfield. See https://docs.kernel.org/networking/ip-sysctl.html for a list of flags.
              # - name: net.ipv4.fib_multipath_hash_fields
              #   This value is:
              #   * Source IP address
              #   * Destination IP address
              #   * IP protocol (TCP, UDP, etc)
              #   * Destination port
              #   value: "0x27"

              # # Enable IP forwarding so that the pod can route traffic between interfaces.
              # # This is already enabled on all pods so it doesn't need to be explicitly set
              # - name: net.ipv4.ip_forward
              #   value: "1"
    persistence:
      keepalived-config:
        type: emptyDir
        medium: Memory
        sizeLimit: 1Mi
        advancedMounts:
          vpn-router:
            keepalived-config-gen:
              - path: /etc/keepalived/
            keepalived:
              - path: /etc/keepalived/
                readOnly: true
      vpn-router-scripts:
        type: configMap
        name: vpn-router-scripts
        defaultMode: 0755
        advancedMounts:
          vpn-router:
            keepalived-config-gen:
              - &lib
                path: /usr/local/bin/lib.sh
                subPath: lib.sh
                readOnly: true
              - path: /usr/local/bin/keepalived-conf-gen.sh
                subPath: keepalived-conf-gen.sh
                readOnly: true
            setup-dns-nat:
              - path: /usr/local/bin/setup-dns-nat.sh
                subPath: setup-dns-nat.sh
                readOnly: true
            setup-return-routing:
              - *lib
              - path: /usr/local/bin/setup-return-routing.sh
                subPath: setup-return-routing.sh
                readOnly: true
            keepalived:
              - path: /usr/local/bin/keepalived-startup-probe.sh
                subPath: keepalived-startup-probe.sh
                readOnly: true
              - path: /usr/local/bin/keepalived-liveness-probe.sh
                subPath: keepalived-liveness-probe.sh
                readOnly: true
    service:
      metrics:
        controller: vpn-router
        suffix: metrics
        ports:
          rm-metrics:
            port: 9090
            targetPort: 9090
    serviceMonitor:
      gateway-route-manager:
        service:
          identifier: metrics
        endpoints:
          - port: rm-metrics
