---
# yaml-language-server: $schema=./schema.json
# This service needs to be highly available.
# If cert-manager fails then services that need to generate mTLS certs will fail.
apiVersion: helm.toolkit.fluxcd.io/v2
kind: HelmRelease
metadata:
  name: &app_name cert-manager
spec:
  interval: 1h
  chart:
    spec:
      chart: cert-manager
      reconcileStrategy: ChartVersion
      sourceRef:
        kind: HelmRepository
        name: jetstack-charts
      version: 1.16.1
  values:
    global:
      leaderElection:
        namespace: certificates
      priorityClassName: system-cluster-critical
    crds:
      enabled: true
    replicaCount: 2
    podDisruptionBudget:
      enabled: true
      minAvailable: 1
    featureGates: NameConstraints=true,ServerSideApply=true,UseCertificateRequestBasicConstraints=true,UseDomainQualifiedFinalizer=true,ValidateCAA=true # ,ExperimentalGatewayAPISupport # TODO after gateway CRDs have been installed
    enableCertificateOwnerRef: true
    disableAutoApproval: true # approver-policy will be used to handle approvals given specific constraints
    # ingressShim:  # TODO
    #   defaultIssuerGroup:
    #   defaultIssuerKind:
    #   defaultIssuerName:
    # TODO Monitoring CRDs
    # prometheus:
    #   servicemonitor:
    #     enabled: true
    # Prefer placing cert-manager pods _of different components_ on the same
    # node, but force pods _of the same component_ onto separate nodes.
    affinity: &affinity_rules
      podAffinity:
        preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchLabels:
                  app.kubernetes.io/instance: *app_name
              topologyKey: kubernetes.io/hostname
    topologySpreadConstraints:
      - maxSkew: 1 # Skew of 1 allows for rolling updates
        topologyKey: kubernetes.io/hostname
        labelSelector:
          matchLabels:
            app.kubernetes.io/component: controller
            app.kubernetes.io/instance: *app_name
        whenUnsatisfiable: DoNotSchedule
    webhook:
      replicaCount: 2
      featureGates: NameConstraints=true
      podDisruptionBudget:
        enabled: true
        minAvailable: 1
      affinity: *affinity_rules
      topologySpreadConstraints:
        - maxSkew: 1
          topologyKey: kubernetes.io/hostname
          labelSelector:
            matchLabels:
              app.kubernetes.io/component: webhook
              app.kubernetes.io/instance: *app_name
          whenUnsatisfiable: DoNotSchedule
    cainjector:
      replicaCount: 2
      featureGates: ServerSideApply=true
      podDisruptionBudget:
        enabled: true
        minAvailable: 1
      affinity: *affinity_rules
      topologySpreadConstraints:
        - maxSkew: 1
          topologyKey: kubernetes.io/hostname
          labelSelector:
            matchLabels:
              app.kubernetes.io/component: cainjector
              app.kubernetes.io/instance: *app_name
          whenUnsatisfiable: DoNotSchedule
