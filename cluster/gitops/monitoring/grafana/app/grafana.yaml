---
# yaml-language-server: $schema=https://raw.githubusercontent.com/datreeio/CRDs-catalog/main/grafana.integreatly.org/grafana_v1beta1.json
apiVersion: grafana.integreatly.org/v1beta1
kind: Grafana
metadata:
  name: grafana
spec:
  config:
    auth:
      signout_redirect_url: https://authentik.${SECRET_PUBLIC_DOMAIN_NAME}/application/o/grafana/end-session/
    auth.generic_oauth:
      name: Authentik
      enabled: "true"
      client_id: "${SECRET_GRAFANA_AUTHENTIK_OIDC_CLIENT_ID}"
      client_secret: "${SECRET_GRAFANA_AUTHENTIK_OIDC_CLIENT_SECRET}"
      scopes: openid profile email
      auth_url: https://authentik.${SECRET_PUBLIC_DOMAIN_NAME}/application/o/authorize/
      token_url: https://authentik.${SECRET_PUBLIC_DOMAIN_NAME}/application/o/token/
      api_url: https://authentik.${SECRET_PUBLIC_DOMAIN_NAME}/application/o/userinfo/
      role_attribute_path: contains(groups, 'Grafana Admins') && 'Admin' || 'Viewer'
      auto_login: "true"
    users:
      auto_assign_org: "true"
      default_theme: system
      # See https://github.com/grafana/grafana/issues/8768#issuecomment-319062055
      external_manage_link_url: https://authentik.${SECRET_PUBLIC_DOMAIN_NAME}
      external_manage_link_name: Authentik
      external_manage_info: Users are managed via Authentik. Contact the owner to request access.
      viewers_can_edit: "true" # Edit but no saving (which means viewers won't affect other users)
    log:
      mode: console
    server:
      root_url: https://grafana.${SECRET_PUBLIC_DOMAIN_NAME}
    database:
      type: postgres
      host: grafana-postgres-17-rw.monitoring.svc:5432
      name: grafana
      user: grafana
      ssl_mode: verify-full
      ca_cert_path: /etc/grafana/secrets/root-ca-cert/ca.crt
      client_cert_path: /etc/grafana/secrets/postgres-grafana-user/tls.crt
      client_key_path: /etc/grafana/secrets/postgres-grafana-user/tls.key
      server_cert_name: grafana-postgres-17-rw.monitoring.svc
    remote_cache:
      type: database
    unified_alerting:
      # TODO use this config and delete the manually-configured service after
      # the next operator release. Non-standard values are used to prevent
      # breakage when upgrading to the next release.
      # See https://github.com/grafana/grafana-operator/pull/1840
      # ha_listen_address: $${POD_IP}:9094
      # ha_peers: grafana-alerting.monitoring.svc:9094
      # ha_advertise_address: $${POD_IP}:9094
      ha_listen_address: $${POD_IP_MANUAL}:9094
      ha_peers: grafana-alerting-manaual.monitoring.svc:9094
      ha_advertise_address: $${POD_IP_MANUAL}:9094
      ha_peer_timeout: 15s
      ha_reconnect_timeout: 2m
    unified_alerting.screenshots:
      capture: "true"
      upload_external_image_storage: "true"
    external_image_storage:
      provider: s3
    external_image_storage.s3:
      path_style_access: "true"
      bucket: grafana-notification-images
      region: dummy-region
    rendering:
      server_url: http://grafana-image-renderer.monitoring.svc/render
      callback_url: http://grafana-service.monitoring.svc:3000
    analytics:
      check_for_updates: "false"
      check_for_plugin_updates: "false"
      feedback_links_enabled: "false"
    plugins:
      plugin_admin_enabled: "false" # Require this to be managed via CR
    dashboards:
      min_refresh_interval: 1s
    explore:
      defaultTimeOffset: 1d
    news:
      news_feed_enabled: "false"
    smtp:
      enabled: "true"
      host: docker-postfix-mail.email.svc.cluster.local:25
      from_address: no-reply-grafana@${SECRET_PUBLIC_DOMAIN_NAME}
      startTLS_policy: NoStartTLS
  deployment:
    spec:
      replicas: 2
      template:
        spec:
          # The volumes for dashboards and provisioning config
          volumes:
            - name: &shared_dashboards sidecar-shared-dashboards
              emptyDir: {}
            - name: &sidecar_config configmap-dashboard-provider-config
              configMap:
                name: configmap-dashboard-provider-config
            - name: &postgres_serving root-ca-cert
              secret:
                secretName: monitoring-intermediary-ca
                defaultMode: 0440
                items:
                  - key: ca.crt
                    path: ca.crt
            - name: &postgres_user postgres-grafana-user
              secret:
                secretName: grafana-postgres-grafana-user
                defaultMode: 0440
                items:
                  - key: tls.crt
                    path: tls.crt
                  - key: tls.key
                    path: tls.key
          securityContext:
            fsGroup: &gid 472
            fsGroupChangePolicy: OnRootMismatch
          containers:
            - name: grafana
              envFrom:
                - configMapRef:
                    name: grafana-image-renderer
                - secretRef:
                    name: grafana-image-renderer
              env:
                - name: GF_SECURITY_ADMIN_PASSWORD
                  valueFrom:
                    secretKeyRef:
                      name: grafana-admin-password
                      key: adminPassword
                - name: GF_EXTERNAL_IMAGE_STORAGE_S3_ACCESS_KEY
                  value: $(AWS_ACCESS_KEY_ID)
                - name: GF_EXTERNAL_IMAGE_STORAGE_S3_SECRET_KEY
                  value: $(AWS_SECRET_ACCESS_KEY)
                - name: GF_EXTERNAL_IMAGE_STORAGE_S3_ENDPOINT
                  value: https://$(BUCKET_HOST):$(BUCKET_PORT)
                - name: GF_RENDERING_RENDERER_TOKEN
                  valueFrom:
                    secretKeyRef:
                      name: grafana-image-renderer-auth-token
                      key: authToken
                - name: POD_IP_MANUAL
                  valueFrom:
                    fieldRef:
                      fieldPath: status.podIP
              ports:
                # TODO see above about removing this after next release
                - name: grafana-alert-manual
                  containerPort: 9094
                  protocol: TCP
              securityContext: &container_security_context
                readOnlyRootFilesystem: true
                runAsNonRoot: true
                runAsUser: 65534
                runAsGroup: *gid
                allowPrivilegeEscalation: false
                privileged: false
                seccompProfile:
                  type: RuntimeDefault
                capabilities:
                  drop:
                    - ALL
              volumeMounts:
                - name: *sidecar_config
                  mountPath: /etc/grafana/provisioning/dashboards
                - name: *shared_dashboards
                  mountPath: /var/lib/grafana/dashboards
                - name: *postgres_serving
                  mountPath: /etc/grafana/secrets/root-ca-cert
                - name: *postgres_user
                  mountPath: /etc/grafana/secrets/postgres-grafana-user
            # This container watches the namespace for configmaps with the `dashboards` label
            # and creates files for all their keys under `FOLDER`
            - image: ghcr.io/kiwigrid/k8s-sidecar:1.30.1
              name: k8s-sidecar
              volumeMounts:
                - name: *shared_dashboards
                  mountPath: &sidecar_dashboards_mount /var/lib/grafana/dashboards
              env:
                # Resource selection configuration
                - name: NAMESPACE
                  value: ALL
                - name: LABEL
                  value: grafana_dashboard
                - name: LABEL_VALUE
                  value: "1"
                # File writing configuration
                - name: FOLDER
                  value: *sidecar_dashboards_mount
                # Important: This could potentially be exploited to replace read or executed files.
                # Mitigate this by making as much as possible read-only.
                - name: FOLDER_ANNOTATION
                  value: grafana_folder
                - name: DEFAULT_FILE_MODE
                  value: "664"
                - name: UNIQUE_FILENAMES
                  value: "true"
                - name: RESOURCE
                  value: both
                # k8s watch configuration
                - name: METHOD
                  value: WATCH
                - name: WATCH_SERVER_TIMEOUT
                  value: "3600"
                - name: WATCH_CLIENT_TIMEOUT
                  value: "15"
                - name: IGNORE_ALREADY_PROCESSED
                  value: "true"
                # Reload the dashboards when a new one is added
                - name: REQ_URL
                  value: http://localhost:3000/api/admin/provisioning/datasources/reload
                - name: REQ_METHOD
                  value: POST
                # Credentials for reloading
                - name: REQ_USERNAME
                  value: admin
                - name: REQ_PASSWORD
                  valueFrom:
                    secretKeyRef:
                      name: grafana-admin-password
                      key: adminPassword
              securityContext: *container_security_context
