---
# yaml-language-server: $schema=https://raw.githubusercontent.com/datreeio/CRDs-catalog/main/cilium.io/ciliumnetworkpolicy_v2.json
apiVersion: cilium.io/v2
kind: CiliumNetworkPolicy
metadata:
  name: grafana
specs:
  - description: grafana
    endpointSelector:
      matchLabels:
        app: grafana
    # Note: grafana will attempt to connect to the IP addresses of terminated instances upon startup,
    # resulting in blocked packets. This is a known issue and is not a security concern.
    egress:
      # Allow internet access for plugin installation
      # TODO build an image with plugins pre-installed so that this can be removed
      - toFQDNs:
          - matchName: grafana.com
          - matchName: storage.googleapis.com
        toPorts:
          - ports:
              - port: "443"
                protocol: TCP
      # Allow access to the instance's database
      - toEndpoints:
          - matchLabels:
              cnpg.io/cluster: grafana-postgres-17
        toPorts:
          - ports:
              - port: postgresql
                protocol: TCP
      # Allow access to VictoriaMetrics (load balancer endpoint)
      - toEndpoints:
          - matchLabels:
              app.kubernetes.io/instance: victoria-metrics-k8s-stack
              app.kubernetes.io/name: vmclusterlb-vmauth-balancer
        toPorts:
          - ports:
              - port: "8427"
                protocol: TCP
      # Allow access to the alertmanager web service
      - toEndpoints:
          - matchLabels:
              app.kubernetes.io/instance: victoria-metrics-k8s-stack
              app.kubernetes.io/name: vmalertmanager
        toPorts:
          - ports:
              - port: "9093"
                protocol: TCP
      # Allow access to the image rendering service
      - toEndpoints:
          - &image_renderer_labels
            matchLabels:
              app.kubernetes.io/instance: grafana-image-renderer
              app.kubernetes.io/name: grafana-image-renderer
        toPorts:
          - ports:
              - port: "8081"
                protocol: TCP
      # DNS resolution
      - toEndpoints:
          - matchLabels:
              io.kubernetes.pod.namespace: networking
              endpoints.netpols.home.arpa/cluster-dns: "true"
        toPorts:
          - ports:
              - port: "53"
                protocol: UDP
              - port: "53"
                protocol: TCP
            rules:
              dns:
                - matchPattern: "*"
      # Allow k8s-sidecar container access to k8s for accessing dashboard configmaps and secrets
      - toEntities:
          - kube-apiserver
        toPorts:
          - ports:
              - port: "6443"
                protocol: TCP
      # Allow access to S3
      - toFQDNs:
          - matchName: s3.${SECRET_PUBLIC_DOMAIN_NAME}
        toPorts:
          - ports:
              - port: "443"
                protocol: TCP
      # Gossip protocol between peers
      - toEndpoints:
          - matchLabels:
              app: grafana
        toPorts: &alertmanager_ports
          - ports:
              - port: "9094"
                protocol: UDP
              - port: "9094"
                protocol: TCP
      # Allow emailing alerts via SMTP relay
      - toEndpoints:
          - matchLabels:
              endpoints.netpols.home.arpa/email-relay: "true"
        toPorts:
          - ports:
              - port: "25"
                protocol: TCP
    ingress:
      # Kubelet to exporter for healthcheck
      - fromEntities:
          - host
        toPorts:
          - ports:
              - port: grafana-http
                protocol: TCP
      # Gossip protocol between peers
      - fromEndpoints:
          - matchLabels:
              app: grafana
        toPorts: *alertmanager_ports
      # Web access
      - fromEndpoints:
          # Ingress
          - matchLabels:
              io.kubernetes.pod.namespace: networking
              app.kubernetes.io/name: ingress-gateways
              gateway.networking.k8s.io/gateway-name: internal-gateway
          # Configuration via operator
          - matchLabels:
              app.kubernetes.io/instance: grafana-operator
              app.kubernetes.io/name: grafana-operator
          # Metrics for Grafana itself
          - matchLabels:
              endpoints.netpols.home.arpa/metrics-scraper: "true"
          # Callbacks from the image rendering service
          - *image_renderer_labels
        toPorts:
          - ports:
              - port: grafana-http
                protocol: TCP
