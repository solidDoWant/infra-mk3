---
# yaml-language-server: $schema=./schema.json
# cspell:words Addrs
apiVersion: helm.toolkit.fluxcd.io/v2
kind: HelmRelease
metadata:
  name: teleport-cluster
spec:
  interval: 5m
  chart:
    spec:
      chart: teleport-cluster
      sourceRef:
        kind: HelmRepository
        name: teleport-charts
      version: 17.2.9
  valuesFrom:
    # S3 URL
    - kind: ConfigMap
      name: teleport-audit-sessions-url
      valuesKey: url
      targetPath: auth.teleportConfig.teleport.storage.audit_sessions_uri
  values:
    # I'm pretty sure that the key in the chart docs is for the wrong path
    # This should cover both the chart docs, and what I think is the right path
    global:
      installCRDs: never
    clusterName: teleport.${SECRET_PUBLIC_DOMAIN_NAME}
    kubeClusterName: infra-mk3
    proxyProtocol: off
    auth:
      teleportConfig:
        teleport:
          storage:
            type: postgresql
            conn_string: "\
              postgresql://\
              teleport-core@teleport-core-postgres-17-rw.security.svc.cluster.local:5432/teleport-core?\
              pool_max_conns=20&\
              sslrootcert=/etc/teleport-backend/secrets/core/server/ca.crt&\
              sslcert=/etc/teleport-backend/secrets/core/client/tls.crt&\
              sslkey=/etc/teleport-backend/secrets/core/client/tls.key&\
              sslmode=verify-full"
            audit_events_uri: "\
              postgresql://\
              teleport-audit@teleport-audit-postgres-17-rw.security.svc.cluster.local:5432/teleport-audit?\
              sslrootcert=/etc/teleport-backend/secrets/audit/server/ca.crt&\
              sslcert=/etc/teleport-backend/secrets/audit/client/tls.crt&\
              sslkey=/etc/teleport-backend/secrets/audit/client/tls.key&\
              sslmode=verify-full"
      extraVolumes:
        - name: intermediary-ca-cert
          secret:
            secretName: security-intermediary-ca
            defaultMode: 0440
            items:
              - key: ca.crt
                path: ca.crt
        - name: teleport-core-postgres-teleport-core-user
          secret:
            secretName: teleport-core-postgres-teleport-core-user
            defaultMode: 0440
            items:
              - key: tls.crt
                path: tls.crt
              - key: tls.key
                path: tls.key
        - name: teleport-audit-postgres-teleport-audit-user
          secret:
            secretName: teleport-audit-postgres-teleport-audit-user
            defaultMode: 0440
            items:
              - key: tls.crt
                path: tls.crt
              - key: tls.key
                path: tls.key
      extraVolumeMounts:
        - name: intermediary-ca-cert
          mountPath: /etc/teleport-backend/secrets/core/server
        - name: teleport-core-postgres-teleport-core-user
          mountPath: /etc/teleport-backend/secrets/core/client
        - name: intermediary-ca-cert
          mountPath: /etc/teleport-backend/secrets/audit/server
        - name: teleport-audit-postgres-teleport-audit-user
          mountPath: /etc/teleport-backend/secrets/audit/client
      extraEnv:
        # The S3 client will fail before attempting connection to Rook if this is not set
        - name: AWS_DEFAULT_REGION
          value: dummy-value
    proxy:
      # See note in routes.yaml
      annotations:
        coredns.io/hostname: teleport.${SECRET_PUBLIC_DOMAIN_NAME}
      teleportConfig:
        proxy_service:
          # TODO limit access to proxy to only gateways per RFD 123:
          # https://github.com/gravitational/teleport/blob/master/rfd/0123-tls-routing-behind-layer7-lb.md
          trust_x_forwarded_for: true
    # In HA mode this is entirely handled via DB/S3/etc.
    persistence:
      enabled: false
    authentication:
      type: oidc
      connectorName: authentik
      localAuth: false
      lockingMode: strict
      # Apparently "off" just errors now???
      # secondFactor: off # This is handled by Authentik. TODO consider additional enforcement
    # See note in routes.yaml
    proxyListenerMode: separate
    separatePostgresListener: true
    separateMongoListener: true
    sessionRecording: node-sync
    enterprise: true
    licenseSecretName: teleport-license
    operator:
      enabled: true
    podMonitor:
      enabled: true
    highAvailability:
      replicaCount: 2
      requireAntiAffinity: true
      podDisruptionBudget:
        enabled: true
        minAvailable: 1
      # Needed for proxy only per chart
      certManager:
        enabled: true
        addCommonName: true
        addPublicAddrs: true
        issuerKind: ClusterIssuer
        issuerName: letsencrypt-production
    service:
      type: LoadBalancer
      spec:
        loadBalancerIP: 10.34.0.3
    ingress:
      # enabled: true
      # See note in routes.yaml
      # useExisting: true
  postRenderers:
    # Add env vars for audit session logging S3 bucket access
    - kustomize:
        patches:
          - patch: |
              - op: add
                path: /spec/template/spec/containers/0/envFrom
                value:
                  - secretRef:
                      name: teleport-audit-sessions
            target:
              group: apps
              version: v1
              kind: Deployment
              name: teleport-cluster-auth
    # Add additional information to cert
    - kustomize:
        patches:
          - patch: |
              - op: add
                path: /spec/subject
                value:
                  countries:
                    - US
                  provinces:
                    - ${SECRET_STATE}
                  organizations:
                    - infra-mk3
            target:
              group: cert-manager.io
              version: v1
              kind: Certificate
              name: teleport-cluster
    # Add TSCs
    - kustomize:
        patches:
          - patch: |
              - op: add
                path: /spec/template/spec/topologySpreadConstraints
                value:
                  - maxSkew: 1 # Skew of 1 allows for rolling updates
                    topologyKey: kubernetes.io/hostname
                    labelSelector:
                      matchLabels:
                        app.kubernetes.io/name: teleport-cluster
                        app.kubernetes.io/component: auth
                    whenUnsatisfiable: DoNotSchedule
            target:
              group: apps
              version: v1
              kind: Deployment
              labelSelector: app.kubernetes.io/component = auth
          - patch: |
              - op: add
                path: /spec/template/spec/topologySpreadConstraints
                value:
                  - maxSkew: 1 # Skew of 1 allows for rolling updates
                    topologyKey: kubernetes.io/hostname
                    labelSelector:
                      matchLabels:
                        app.kubernetes.io/name: teleport-cluster
                        app.kubernetes.io/component: proxy
                    whenUnsatisfiable: DoNotSchedule
            target:
              group: apps
              version: v1
              kind: Deployment
              labelSelector: app.kubernetes.io/component = proxy
    # TODO add affinity for auth and postgres primary to attract to the same nodes
