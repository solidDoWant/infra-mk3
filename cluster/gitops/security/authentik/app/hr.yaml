---
# cspell:words SSLMODE SSLROOTCERT SSLCERT SSLKEY REQS certfile
apiVersion: helm.toolkit.fluxcd.io/v2
kind: HelmRelease
metadata:
  name: authentik
spec:
  interval: 5m
  chart:
    spec:
      chart: authentik
      sourceRef:
        kind: HelmRepository
        name: authentik-charts
      version: 2024.10.2
  values:
    global:
      env:
        # Postgres
        ## RW endpoint
        AUTHENTIK_POSTGRESQL__HOST: authentik-postgres-17-rw.security.svc.cluster.local.
        AUTHENTIK_POSTGRESQL__NAME: authentik
        AUTHENTIK_POSTGRESQL__USER: authentik
        AUTHENTIK_POSTGRESQL__PORT: "5432"
        AUTHENTIK_POSTGRESQL__SSLMODE: verify-full
        AUTHENTIK_POSTGRESQL__SSLROOTCERT: /etc/authentic/secrets/root-ca-cert/ca.crt
        AUTHENTIK_POSTGRESQL__SSLCERT: /etc/authentic/secrets/postgres-authentik-user/tls.crt
        AUTHENTIK_POSTGRESQL__SSLKEY: /etc/authentic/secrets/postgres-authentik-user/tls.key
        ## RO endpoint
        AUTHENTIK_POSTGRESQL__READ_REPLICAS__0__HOST: authentik-postgres-17-ro.security.svc.cluster.local.
        AUTHENTIK_POSTGRESQL__READ_REPLICAS__0__NAME: authentik
        AUTHENTIK_POSTGRESQL__READ_REPLICAS__0__USER: authentik
        AUTHENTIK_POSTGRESQL__READ_REPLICAS__0__PORT: "5432"
        AUTHENTIK_POSTGRESQL__READ_REPLICAS__0__SSLMODE: verify-full
        AUTHENTIK_POSTGRESQL__READ_REPLICAS__0__SSLROOTCERT: /etc/authentic/secrets/root-ca-cert/ca.crt
        AUTHENTIK_POSTGRESQL__READ_REPLICAS__0__SSLCERT: /etc/authentic/secrets/postgres-authentik-user/tls.crt
        AUTHENTIK_POSTGRESQL__READ_REPLICAS__0__SSLKEY: /etc/authentic/secrets/postgres-authentik-user/tls.key
        # Redis
        AUTHENTIK_REDIS__HOST: authentik-dragonfly.security.svc.cluster.local.
        AUTHENTIK_REDIS__PORT: "6379"
        AUTHENTIK_REDIS__TLS: "true"
        AUTHENTIK_REDIS__TLS_REQS: "required"
        # Workaround to provide client auth certs, see https://github.com/goauthentik/authentik/issues/12041
        AUTHENTIK_REDIS__TLS_CA_CERT: "
          /etc/authentic/secrets/root-ca-cert/ca.crt&\
          ssl_certfile=/etc/authentic/secrets/dragonfly-authentik-user/tls.crt&\
          ssl_keyfile=/etc/authentic/secrets/dragonfly-authentik-user/tls.key\
          "
        # Use the right source IP
        # TODO netpol to limit traffic to gateway pods
        AUTHENTIK_LISTEN__TRUSTED_PROXY_CIDRS: 10.32.0.0/16
        # Media file storage
        AUTHENTIK_STORAGE__MEDIA__BACKEND: s3
        AUTHENTIK_STORAGE__MEDIA__S3__USE_SSL: "true"
        AUTHENTIK_STORAGE__MEDIA__S3__SECURE_URLS: "true"
        AUTHENTIK_STORAGE__MEDIA__S3__ENDPOINT: https://$(BUCKET_HOST).
        AUTHENTIK_STORAGE__MEDIA__S3__ACCESS_KEY: $(AWS_ACCESS_KEY_ID)
        AUTHENTIK_STORAGE__MEDIA__S3__SECRET_KEY: $(AWS_SECRET_ACCESS_KEY)
        AUTHENTIK_STORAGE__MEDIA__S3__BUCKET_NAME: $(BUCKET_NAME)
        AUTHENTIK_STORAGE__MEDIA__S3__CUSTOM_DOMAIN: $(BUCKET_HOST).:$(BUCKET_PORT)/$(BUCKET_NAME)
        # Email
        AUTHENTIK_EMAIL__HOST: docker-postfix-mail.email.svc.cluster.local.
        AUTHENTIK_EMAIL__PORT: "587"
        AUTHENTIK_EMAIL__USE_TLS: "true"
        AUTHENTIK_EMAIL__FROM: Authentik <no-reply-authentik@${SECRET_PUBLIC_DOMAIN_NAME}>
        # Authentik
        AUTHENTIK_DISABLE_UPDATE_CHECK: "true"
      envFrom:
        - configMapRef:
          name: authentik-media
        - secretRef:
          name: authentik-media
        - secretRef:
          name: env-values
      volumes:
        - name: root-ca-cert
          secret:
            secretName: security-intermediary-ca
            defaultMode: 0400
            items:
              - key: ca.crt
                path: ca.crt
        - name: postgres-authentik-user
          secret:
            secretName: authentik-postgres-authentik-user
            defaultMode: 0400
            items:
              - key: tls.crt
                path: tls.crt
              - key: tls.key
                path: tls.key
        - name: dragonfly-authentik-user
          secret:
            secretName: authentik-dragonfly-authentik-user
            defaultMode: 0400
            items:
              - key: tls.crt
                path: tls.crt
              - key: tls.key
                path: tls.key
      volumeMounts:
        - name: root-ca-cert
          mountPath: /etc/authentic/secrets/root-ca-cert
        - name: postgres-authentik-user
          mountPath: /etc/authentic/secrets/postgres-authentik-user
        - name: dragonfly-authentik-user
          mountPath: /etc/authentic/secrets/dragonfly-authentik-user
    # authentik:
    #   secret_key:
    # email:
    #   host:
    #   use_tls: true
    #   from: no-reply-authentik@${SECRET_PUBLIC_DOMAIN_NAME}
    # postgresql:
    #   host:
    # redis:
    #   host:
    server:
      replicas: 2
      pdb:
        enabled: true
      # env:
      # topologySpreadConstraints:
      metrics:
        enabled: true
        serviceMonitor:
          enabled: true
      # ingress:  # TODO httproute
    worker:
      replicas: 2
      pdb:
        enabled: true
      # topologySpreadConstraints:
    geoip:
      enabled: true
      existingSecret:
        secretName: authentik-geoip-credentials
    prometheus:
      rules:
        enabled: true
