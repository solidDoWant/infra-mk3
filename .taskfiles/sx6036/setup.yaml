---
# yaml-language-server: $schema=https://taskfile.dev/schema.json
version: 3

includes:
  ssh:
    taskfile: ssh.yaml
    internal: true
  local:
    taskfile: local.yaml
    internal: true

tasks:
  # This is really janky, but unfortunately due to several taskfile limitations there isn't really a
  # cleaner way
  update-firmware-all:
    deps:
      - task: download-firmware-all
    vars:
      FIRMWARE_DIR: &FIRMWARE_DIR '{{ default "/tmp/host-mounts/mellanox-firmware" .FIRMWARE_DIR }}'
    cmds:
      - defer: |
          rm -rvf {{ shellQuote .FIRMWARE_DIR }}
      # Run updates until it fails, presumably due to no more updates being available
      - for: &FIRMWARE_URLS
          - https://www.mellanox.com/downloads/Software/image-PPC_M460EX-3.4.2008.img
          - https://www.mellanox.com/downloads/Software/image-PPC_M460EX-3.5.1006.img
          - https://www.mellanox.com/downloads/Software/image-PPC_M460EX-3.6.1002.img
          - https://www.mellanox.com/downloads/Software/image-PPC_M460EX-3.6.2002.img
          - https://www.mellanox.com/downloads/Software/image-PPC_M460EX-3.6.2102.img
          - https://www.mellanox.com/downloads/Software/image-PPC_M460EX-3.6.3004.img
          - https://www.mellanox.com/downloads/Software/image-PPC_M460EX-3.6.5000.img
          - https://www.mellanox.com/downloads/Software/image-PPC_M460EX-3.6.5009.img
          - https://www.mellanox.com/downloads/Software/image-PPC_M460EX-3.6.8008.img
          - https://www.mellanox.com/downloads/Software/image-PPC_M460EX-3.6.8010.img
          - https://www.mellanox.com/downloads/Software/image-PPC_M460EX-3.6.8012.img
        task: update-firmware-next

  update-firmware-next:
    internal: true
    deps:
      - task: local:configure-ssh
      - task: download-firmware-all
    vars:
      FIRMWARE_DIR: *FIRMWARE_DIR
      NGINX_IMAGE: nginx:1.27.1
      CONTAINER_NAME: mellanox-firmware
      LOCAL_HTTP_PORT: "8080" # This task does not configure any firewalls that may block traffic to this port
    dir: "{{ .TASKFILE_DIR }}"
    cmds:
      - defer: |
          CONTAINER_ID="$(docker ps -a -q --filter="name={{ .CONTAINER_NAME }}")"
          if [ -z "${CONTAINER_ID}" ]; then exit; fi

          echo "Stopping firmware container..."
          docker container stop "${CONTAINER_ID}" > /dev/null
      # These can't even be split up into `var: sh` stanzas because vars run prior to dependencies executing, and
      # in parallel (despite what the docs say) (WTF??????????)
      - cmd: |
          # Get the currently running firmware version
          echo "Getting the currently running version..."
          CURRENT_IMAGES="$(task -o group run-command -- "enable" "show images")"
          ACTIVE_PARTITION="$(echo "$CURRENT_IMAGES" | sed -nr 's/^Last boot partition: ([[:digit:]]+)/\1/p')"

          case "${ACTIVE_PARTITION}" in
            "1")
              LINE_NUMBER=4
              NEXT_PARTITION=2
              ;;
            "2")
              LINE_NUMBER=7
              NEXT_PARTITION=1
              ;;
            *) 
              >&2 echo "Unknown partition number '${ACTIVE_PARTITION}'"
              exit 1
              ;;
          esac

          VERSION_REGEX='s/^.*([[:digit:]]\.[[:digit:]]\.[[:digit:]]{4}).*/\1/'
          CURRENT_IMAGE_VERSION="$(echo "$CURRENT_IMAGES" | sed -e "${LINE_NUMBER}q;d" | sed -r "${VERSION_REGEX}")"

          echo "Currently running ${CURRENT_IMAGE_VERSION}"

          # Get the next newest version by adding the current version to the list of available versions, sorting it,
          # and picking the next item on the list
          NEXT_VERSION=$(
            printf '%s\n%s' \
              "$(ls "{{ .FIRMWARE_DIR }}")" \
              "${CURRENT_IMAGE_VERSION}" \
            | sed 's/.img$//' \
            | sort -u \
            | grep -A1 "${CURRENT_IMAGE_VERSION}" \
            | tail -n 1
          )

          if [ "${NEXT_VERSION}" == "${CURRENT_IMAGE_VERSION}" ]; then
            echo "Already running the lastest available version"
          fi

          echo "Updating to ${NEXT_VERSION}..."

          # Start a container that serves the images
          docker run --rm -d --name "{{ .CONTAINER_NAME }}" \
            -v "{{ .FIRMWARE_DIR }}:/usr/share/nginx/html:ro" \
            -p {{ .LOCAL_HTTP_PORT }}:80 "{{ .NGINX_IMAGE }}" > /dev/null

          # Fetch the image on the switch
          # Get the IP address that the switch sees this device as by looking at the audit log
          CURRENT_USER="$(task -o group run-command -- "show whoami" | grep 'Current user:' | tr -d ' ' | cut -d':' -f2)"
          USER_HISTORY="$(task -o group run-command -- "enable" "configure terminal" "show users history username ${CURRENT_USER}")"
          LOCAL_IP_ADDRESS="$(echo "${USER_HISTORY}" | grep 'pts/' | head -n 1 | tr -s ' ' | cut -d' ' -f3)"

          task -o group run-command -- \
            "enable" \
            "configure terminal" \
            "image fetch http://${LOCAL_IP_ADDRESS}:{{ .LOCAL_HTTP_PORT }}/${NEXT_VERSION}.img" \
            "image install ${NEXT_VERSION}.img verify require-sig" \
            "image delete ${NEXT_VERSION}.img" \
            "boot system location ${NEXT_PARTITION}"

          # Reboot and wait
          task -o group reboot

  download-firmware-all:
    internal: true
    deps:
      - for: *FIRMWARE_URLS
        vars:
          FIRMWARE_URL: "{{ .ITEM }}"
        task: download-firmware

  download-firmware:
    internal: true
    requires:
      vars:
        - FIRMWARE_URL
    vars:
      FIRMWARE_DIR: *FIRMWARE_DIR
      REMOTE_FILE_NAME:
        sh: basename "{{ .FIRMWARE_URL }}"
      FILE_VERSION:
        sh: echo "{{ .REMOTE_FILE_NAME }}" | sed -r 's/.*([[:digit:]]+\.[[:digit:]]+\.[[:digit:]]+).*/\1/'
      OUTPUT_FILE_PATH:
        sh: echo "{{ .FIRMWARE_DIR }}/{{ .FILE_VERSION }}.img"
    prefix: "{{ .TASK }} ({{ .FILE_VERSION }})"
    cmd: |
      # For some reason the `dir` directive is not treating the value as absolute despite the leading `/` (WTF??)
      mkdir -pv "{{ .FIRMWARE_DIR }}"
      cd "{{ .FIRMWARE_DIR }}"

      FILE_EXTENSION="$(echo "{{ .REMOTE_FILE_NAME }}" | sed 's/.*\.//')"
      LOCAL_DOWNLOAD_FILE_NAME="{{ .FILE_VERSION }}.${FILE_EXTENSION}"

      echo "Downloading firmware version {{ .FILE_VERSION }}..."
      curl -fsSL -o "${LOCAL_DOWNLOAD_FILE_NAME}" "{{ .FIRMWARE_URL }}"

      # Don't extract if not a zip file
      if [ "${FILE_EXTENSION}" != 'zip' ]; then exit; fi

      echo "Extracting img file from downloaded zip..."
      IMG_FILE_NAME="$(unzip -lqq "${LOCAL_DOWNLOAD_FILE_NAME}" '*.img' | tr -s ' ' | cut -d' ' -f4)"
      unzip -u "${LOCAL_DOWNLOAD_FILE_NAME}" "${IMG_FILE_NAME}"
      rm -rvf "${LOCAL_DOWNLOAD_FILE_NAME}"

      mv -v "${IMG_FILE_NAME}" "{{ .OUTPUT_FILE_PATH }}"
    status:
      - test -f "{{ .OUTPUT_FILE_PATH }}"

  full-configuration:
    # deps:
    #   - task: local:configure-ssh
    dir: "{{ .ROOT_DIR }}/ansible"
    cmd: |
      ansible-playbook ./remote/switches/sx6036/setup.yaml
