---
# yaml-language-server: $schema=https://taskfile.dev/schema.json
version: 3

tasks:
  download-iso:
    silent: true
    vars:
      OUTPUT_DIR:
        ref: default .USER_WORKING_DIR .OUTPUT_DIR
      HOSTNAME_ARG:
        ref: default "" (printf "--node %s" .HOSTNAME_ARG)
    dir: "{{ .ROOT_DIR }}/talos"
    sources:
      - talconfig.yaml
    cmd: |
      ensure_exists() {
        local URL_INFO="${1}"
        local NODE_NAME="${URL_INFO%%: *}"
        local ISO_URL="${URL_INFO##*: }"
        local FILE_NAME="${NODE_NAME}.iso"
        local FILE_PATH={{ shellQuote .OUTPUT_DIR }}/"${FILE_NAME}"

        if [ -f "${FILE_PATH}" ]; then
          return 0
        fi

        echo "Downloading ${FILE_NAME}..."
        curl -fsSL -o "${FILE_PATH}" "${ISO_URL}" &
      }

      talhelper genurl iso |
      while read line; do ensure_exists "${line}"; done

      wait
      echo "Completed"

  apply-config:
    silent: true
    desc: Applies talconfig.yaml changes to all nodes
    env:
      TALOSCONFIG: ./talosconfig
    dir: "{{ .ROOT_DIR }}/talos"
    cmds:
      - |
        # Generate/update config files if needed
        if talhelper genconfig -o . -n | grep -q '^@@'; then
          talhelper genconfig -o .
        fi
      - |
        # set -x
        apply_cmd() {
          local IP_ADDRESS="${1}"
          local FILE_NAME="${2}"
          shift 2

          talosctl apply-config -n "${IP_ADDRESS}" --file "${FILE_NAME}" "${@}" 2>&1
        }

        apply_config_if_changed() {
          local CMD_OUTPUT="$(apply_cmd "${@}" --dry-run)"

          if ! echo "${CMD_OUTPUT}" | grep -q 'No changes'; then
            apply_cmd "${@}"

            # Wait for the node to become available
            until talosctl get rd -n "${1}" 2>&1 > /dev/null; do
              printf '.'
            done
            echo ' node online'

          else
            echo "no change"
          fi
        }

        CLUSTER_NAME="$(yq -r '.clusterName' talconfig.yaml)"

        # Apply config for each node
        yq -r '.nodes[] | (.hostname + ":" + .ipAddress)' talconfig.yaml |
        while read line; do 
          HOSTNAME="$(echo "${line}" | cut -d':' -f1)"
          IP_ADDRESS="$(echo "${line}" | cut -d':' -f2)"
          FILE_NAME="${CLUSTER_NAME}-${HOSTNAME}.yaml"
          
          # First attempt with insecure connection (no client cert)
          CMD_OUTPUT="$(apply_config_if_changed "${IP_ADDRESS}" "${FILE_NAME}" -i)" || EC="$?"

          if [[ "${EC}" != 0 ]] && echo "${CMD_OUTPUT}" | grep -q 'certificate required' ; then
            CMD_OUTPUT="$(apply_config_if_changed "${IP_ADDRESS}" "${FILE_NAME}")" \
              && EC='0' || EC="$?"
          fi

          echo "${HOSTNAME}: ${CMD_OUTPUT}"
          [[ "${EC}" == 0 ]] || exit "${EC}"
        done

  bootstrap:
    silent: true
    vars:
      BOOTSTRAP_NODE_IP: 10.2.1.1
    env:
      TALOSCONFIG: ./talosconfig
    dir: "{{ .ROOT_DIR }}/talos"
    cmds:
      - task: apply-config
      - |
        talosctl bootstrap --talosconfig=./talosconfig -e {{ .BOOTSTRAP_NODE_IP | shellQuote }} -n {{ .BOOTSTRAP_NODE_IP | shellQuote }}

        echo "Waiting for node to come back online"
        sleep 10
        until talosctl get rd -n {{ .BOOTSTRAP_NODE_IP | shellQuote }} 2>&1 > /dev/null; do
          printf '.'
        done
        echo
        echo "Bootstrap complete"
